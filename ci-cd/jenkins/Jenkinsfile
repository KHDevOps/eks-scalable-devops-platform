pipeline {
    agent { label 'built-in' }

    parameters {
        credentials(
            name: 'GIT_CREDENTIALS',
            description: 'Choose your credentials Git',
            credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
            defaultValue: '',
            required: true
        )
        
        credentials(
            name: 'KUBE_CREDENTIALS',
            description: 'Choose your credentials Kube',
            credentialType: 'org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl',
            defaultValue: '',
            required: true
        )

    }

    stages {
        
        stage('Checkout Config Repo') {
            steps {
                git branch: 'main',
                    credentialsId: params.GIT_CREDENTIALS,
                    url: "https://github.com/KHDevOps/eks-scalable-devops-platform"
            }
        }

        stage('Test Kubectl') {
            steps {
                script {
                    // Tester si kubectl existe
                    sh 'which kubectl || echo "kubectl not found"'
                    
                    // Tester si on peut acc√©der au cluster
                    sh 'kubectl version --client || echo "kubectl client failed"'
                    sh 'kubectl cluster-info || echo "cluster access failed"'
                    
                    // Tester les permissions
                    sh 'kubectl auth can-i create applications.argoproj.io || echo "no ArgoCD permissions"'
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building..'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                script {
                    def config = readYaml file: 'templates/app-config.yaml'
                    def config_repo = config.git.config_repo
                    def defaultBranch = config.git.default_branch
                    
                    def app_name = config.app.name
                    def version = config.app.version
                    def docker_repo = config.docker.username

                    /*def file_content = """
nameOverride: "${app_name}"
fullnameOverride: "${app_name}"
replicaCount: 1
image:
  repository: "${docker_username}/${app_name}"
  tag: "${version}"
  pullPolicy: IfNotPresent
service:
  type: ClusterIP
  port: 8080
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""
podAnnotations: {}
podLabels: {}
autoscaling:
  enabled: false
ingress:
  enabled: false
resources: {}
        """*/
                    def file_content = """
nameOverride: "${app_name}"
fullnameOverride: "${app_name}"
replicaCount: 1
image:
  repository: "nginxdemos/hello"
  tag: "latest"
  pullPolicy: IfNotPresent
service:
  type: ClusterIP
  port: 80
serviceAccount:
  create: true
  automount: true
autoscaling:
  enabled: false
ingress:
  enabled: false
resources: {}
"""
                    
                    withCredentials([usernamePassword(credentialsId: params.GIT_CREDENTIALS, passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {

                        sh('rm -rf deploy-temp')
                        sh('mkdir deploy-temp')
                        
                        dir('deploy-temp') {

                            sh('git init')
                            sh('git config user.email "jenkins@yourproject.com"')
                            sh('git config user.name "Jenkins Automation"')
                            

                            writeFile file: 'values.yaml', text: file_content
                            
                            sh("git remote add origin https://\${GIT_USERNAME}:\${GIT_PASSWORD}@${config_repo}")
                            sh('git add values.yaml')
                            sh('git commit -m "Jenkins deployment"')
                            sh("git push -f origin HEAD:${defaultBranch}")
                        }
                        
                        sh('rm -rf deploy-temp')
                    }

                    def argoCDApp = """
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ${app_name}
  namespace: argocd
  labels:
    app: ${app_name}
    managed-by: "eks-devops-platform"
spec:
  project: default
  sources:
    - repoURL: https://github.com/KHDevOps/eks-scalable-devops-platform
      targetRevision: HEAD
      path: templates/helm-chart
      ref: templates
    - repoURL: https://${config_repo}
      targetRevision: HEAD
      path: .
      helm:
        valueFiles:
          - values.yaml
        sources:
          - ref: templates
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
"""

                    writeFile file: 'argocd-app.yaml', text: argoCDApp
                    withCredentials([file(credentialsId: params.KUBE_CREDENTIALS, variable: 'KUBECONFIG')]) {
                        sh 'kubectl apply -f argocd-app.yaml'
                    }

                }
            }
        }
    }   
}