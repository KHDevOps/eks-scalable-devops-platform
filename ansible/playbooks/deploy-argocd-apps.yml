---
# This playbook assumes you have already:
# 1. Manually executed terraform apply
# 2. Installed ArgoCD via terraform or manually
# It will simply deploy ArgoCD apps and configure target groups

- name: Deploy ArgoCD Apps and Configure Target Groups
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # Basic parameters
    cluster_name: "eks-cluster-dev"
    ingress_http_nodeport: 31142
    ingress_https_nodeport: 31080
    argocd_apps_dir: "{{ playbook_dir }}/../../ci-cd/argocd/applications/dev"
    
  tasks:
    # Step 1: Verify we can access the cluster
    - name: Verify EKS cluster access
      ansible.builtin.command: 
        cmd: kubectl cluster-info
      register: cluster_info
      changed_when: false
      ignore_errors: true
      
    - name: Display error message if cluster is not accessible
      ansible.builtin.fail:
        msg: "Unable to access EKS cluster. Please check your kubeconfig."
      when: cluster_info.rc != 0
    
    # Step 2: Apply ArgoCD applications
    - name: Find valid ArgoCD application files (not commented)
      ansible.builtin.shell:
        cmd: grep -l "^apiVersion: argoproj.io/v1alpha1" {{ argocd_apps_dir }}/*.yaml
      register: valid_apps_files
      changed_when: false
      
    - name: Apply ArgoCD applications with kubectl
      ansible.builtin.command:
        cmd: kubectl apply -f {{ item }}
      with_items: "{{ valid_apps_files.stdout_lines }}"
      register: kubectl_apply
      changed_when: kubectl_apply.rc == 0
      
    # Step 3: Configure target groups
    - name: Get HTTP target group ARN
      ansible.builtin.shell:
        cmd: aws elbv2 describe-target-groups --names "dev-ingress-http-tg" --query "TargetGroups[0].TargetGroupArn" --output text
      register: http_tg_arn
      changed_when: false
      ignore_errors: true
      
    - name: Get EKS node instance IDs
      ansible.builtin.shell:
        cmd: aws ec2 describe-instances --filters "Name=tag:kubernetes.io/cluster/{{ cluster_name }},Values=owned" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text
      register: node_ids
      changed_when: false
      
    - name: Register nodes to HTTP target group
      ansible.builtin.command:
        cmd: aws elbv2 register-targets --target-group-arn {{ http_tg_arn.stdout }} --targets Id={{ item }},Port={{ ingress_http_nodeport }}
      with_items: "{{ node_ids.stdout.split() }}"
      when: http_tg_arn.rc == 0 and node_ids.stdout != ""
      ignore_errors: true
      
    - name: Get HTTPS target group ARN
      ansible.builtin.shell:
        cmd: aws elbv2 describe-target-groups --names "dev-ingress-https-tg" --query "TargetGroups[0].TargetGroupArn" --output text
      register: https_tg_arn
      changed_when: false
      ignore_errors: true
      
    - name: Register nodes to HTTPS target group
      ansible.builtin.command:
        cmd: aws elbv2 register-targets --target-group-arn {{ https_tg_arn.stdout }} --targets Id={{ item }},Port={{ ingress_https_nodeport }}
      with_items: "{{ node_ids.stdout.split() }}"
      when: https_tg_arn.rc == 0 and node_ids.stdout != ""
      ignore_errors: true
      
    # Step 4: Verify target group health
    - name: Check HTTP target group health status
      ansible.builtin.shell:
        cmd: aws elbv2 describe-target-health --target-group-arn {{ http_tg_arn.stdout }} --query "TargetHealthDescriptions[].TargetHealth.State" --output text
      register: http_health
      changed_when: false
      when: http_tg_arn.rc == 0
      
    # Step 5: Get Load Balancer ARN and DNS
    - name: Get Load Balancer ARN
      ansible.builtin.shell:
        cmd: aws elbv2 describe-load-balancers --names "dev-monitoring-alb" --query "LoadBalancers[0].LoadBalancerArn" --output text
      register: lb_arn
      changed_when: false
      
    - name: Get Load Balancer DNS name
      ansible.builtin.shell:
        cmd: aws elbv2 describe-load-balancers --names "dev-monitoring-alb" --query "LoadBalancers[0].DNSName" --output text
      register: lb_dns
      changed_when: false
      
    # Step 6: Display final information
    - name: Display deployment results
      ansible.builtin.debug:
        msg:
          - "ArgoCD applications deployment completed!"
          - "Deployed applications: {{ valid_apps_files.stdout_lines | map('basename') | list | join(', ') }}"
          - "HTTP targets health: {{ http_health.stdout | default('Not available') }}"
          - "Applications will be automatically synced by ArgoCD."
          - "To access ArgoCD: kubectl port-forward svc/argocd-server -n argocd 8080:443"
          
    - name: Display Load Balancer information
      ansible.builtin.debug:
        msg:
          - "---------------------------------------------"
          - "Go to your domain service and create the following subdomains:"
          - "prometheus, jenkins, argocd, alertmanager, grafana"
          - "Link them to the load balancer using this DNS name:"
          - "{{ lb_dns.stdout }}"
          - "---------------------------------------------"