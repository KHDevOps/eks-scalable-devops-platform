# =============================================================================
# EKS Scalable DevOps Platform - Application Configuration
# =============================================================================
# Copy this file to app-config.yaml and customize for your application
# 
# Required changes:
#   - app.name: Your application name
#   - docker.username: Your Docker Hub username  
#   - networking.domain: Your domain name
#
# All other settings have sensible defaults but can be customized
# =============================================================================

# -----------------------------------------------------------------------------
# APPLICATION IDENTITY
# -----------------------------------------------------------------------------
app:
  # REQUIRED: Your application name (used for Docker image, Kubernetes resources, URLs)
  # Must be lowercase, alphanumeric, and hyphens only
  name: "my-awesome-app"
  
  # Application version (updated automatically by CI/CD)
  version: "1.0.0"
  
  # Human-readable description
  description: "My application deployed with EKS DevOps Platform"
  
  # Application type (helps with templates and monitoring)
  # Options: web, api, worker, microservice, frontend, backend
  type: "web"
  
  # Programming language/framework (for better monitoring defaults)
  # Options: nodejs, python, java, go, ruby, php, dotnet, other
  language: "python"

# -----------------------------------------------------------------------------
# DOCKER CONFIGURATION
# -----------------------------------------------------------------------------
docker:
  # REQUIRED: Your Docker registry (Docker Hub, ECR, etc.)
  registry: "docker.io"
  
  # REQUIRED: Your Docker Hub username or registry namespace
  username: "your-docker-username"
  
  # Docker image name (defaults to app.name if not specified)
  image_name: ""
  
  # Dockerfile path (relative to your source repo)
  dockerfile_path: "./Dockerfile"
  
  # Build context path (relative to your source repo)
  build_context: "."
  
  # Build arguments to pass to Docker build
  build_args:
    # Example: NODE_ENV: production
    # Example: BUILD_VERSION: "${version}"

# -----------------------------------------------------------------------------
# DEPLOYMENT CONFIGURATION
# -----------------------------------------------------------------------------
deployment:
  # Number of pod replicas
  replicas: 2
  
  # Deployment strategy
  # Options: RollingUpdate, Recreate
  strategy: "RollingUpdate"
  
  # Rolling update configuration
  rolling_update:
    max_unavailable: "25%"
    max_surge: "25%"
  
  # Resource allocation
  resources:
    # CPU and memory requests (guaranteed)
    requests:
      cpu: "100m"        # 0.1 CPU core
      memory: "128Mi"     # 128 megabytes
    
    # CPU and memory limits (maximum allowed)
    limits:
      cpu: "500m"        # 0.5 CPU core
      memory: "512Mi"     # 512 megabytes
  
  # Horizontal Pod Autoscaler (HPA)
  autoscaling:
    enabled: true
    min_replicas: 2
    max_replicas: 10
    target_cpu_utilization: 70
    target_memory_utilization: 80
  
  # Pod disruption budget (for high availability)
  pod_disruption_budget:
    enabled: true
    min_available: 1

# -----------------------------------------------------------------------------
# NETWORKING & INGRESS
# -----------------------------------------------------------------------------
networking:
  # REQUIRED: Your domain name
  domain: "your-domain.com"
  
  # Subdomain (defaults to app.name if empty)
  # Final URL will be: {subdomain}.{domain} or {app.name}.{domain}
  subdomain: ""
  
  # Service configuration
  service:
    # Service type: ClusterIP, NodePort, LoadBalancer
    type: "ClusterIP"
    port: 80
    target_port: 8080  # Port your app listens on
  
  # Ingress configuration
  ingress:
    enabled: true
    class: "nginx"
    
    # SSL/TLS configuration
    tls:
      enabled: true
      # Certificate will be automatically managed if using cert-manager
      # cert_manager_issuer: "letsencrypt-prod"
    
    # Additional ingress annotations
    annotations:
      # Example: nginx.ingress.kubernetes.io/rate-limit: "100"
      # Example: nginx.ingress.kubernetes.io/ssl-redirect: "true"
  
  # Additional hostnames (for multi-domain apps)
  additional_hosts:
    # - host: "api.your-domain.com"
    #   paths: ["/api"]
    # - host: "admin.your-domain.com"
    #   paths: ["/"]

# -----------------------------------------------------------------------------
# ENVIRONMENT CONFIGURATION
# -----------------------------------------------------------------------------
environment:
  # Environment variables for your application
  variables:
    # Non-sensitive environment variables
    NODE_ENV: "production"
    LOG_LEVEL: "info"
    # DATABASE_HOST: "postgres-service"
    # REDIS_HOST: "redis-service"
    # API_BASE_URL: "https://api.example.com"
  
  # Sensitive environment variables (stored in Kubernetes secrets)
  secrets:
    # These will be created as Kubernetes secrets
    # DATABASE_PASSWORD: "your-db-password"
    # API_KEY: "your-api-key"
    # JWT_SECRET: "your-jwt-secret"
  
  # Config maps to mount as files
  config_files:
    # Example: mount a config file
    # - name: "app-config"
    #   mount_path: "/app/config"
    #   data:
    #     config.json: |
    #       {
    #         "feature_flags": {
    #           "new_feature": true
    #         }
    #       }

# -----------------------------------------------------------------------------
# HEALTH CHECKS & PROBES
# -----------------------------------------------------------------------------
health_checks:
  # Liveness probe (restart pod if failing)
  liveness:
    enabled: true
    path: "/health"
    port: 8080
    initial_delay: 30
    period: 10
    timeout: 5
    failure_threshold: 3
  
  # Readiness probe (remove from service if failing)
  readiness:
    enabled: true
    path: "/ready"
    port: 8080
    initial_delay: 5
    period: 5
    timeout: 3
    failure_threshold: 3
  
  # Startup probe (for slow-starting apps)
  startup:
    enabled: false
    path: "/health"
    port: 8080
    initial_delay: 10
    period: 10
    timeout: 5
    failure_threshold: 30

# -----------------------------------------------------------------------------
# OBSERVABILITY & MONITORING
# -----------------------------------------------------------------------------
observability:
  # Prometheus metrics
  metrics:
    enabled: true
    port: 8080
    path: "/metrics"
    scrape_interval: "30s"
  
  # Logging configuration
  logging:
    enabled: true
    level: "info"          # debug, info, warn, error
    format: "json"         # json, text
    # Log aggregation (if using centralized logging)
    # fluentd: true
    # filebeat: true
  
  # Distributed tracing
  tracing:
    enabled: false
    # jaeger: true
    # zipkin: true
  
  # Service monitoring
  service_monitor:
    enabled: true
    labels:
      monitoring: "prometheus"

# -----------------------------------------------------------------------------
# SECURITY CONFIGURATION
# -----------------------------------------------------------------------------
security:
  # Pod security context
  pod_security:
    run_as_non_root: true
    run_as_user: 1000
    run_as_group: 1000
    fs_group: 1000
  
  # Container security context
  container_security:
    allow_privilege_escalation: false
    read_only_root_filesystem: true
    capabilities:
      drop: ["ALL"]
      # add: ["NET_BIND_SERVICE"]  # If needed
  
  # Network policies
  network_policy:
    enabled: false
    # ingress_rules: []
    # egress_rules: []
  
  # Service account
  service_account:
    create: true
    name: ""  # Defaults to app.name
    annotations: {}

# -----------------------------------------------------------------------------
# PERSISTENCE (for stateful apps)
# -----------------------------------------------------------------------------
persistence:
  # Persistent volumes
  volumes:
    # Example: data volume
    # - name: "data"
    #   size: "10Gi"
    #   storage_class: "gp2"
    #   access_mode: "ReadWriteOnce"
    #   mount_path: "/app/data"
    
    # Example: logs volume
    # - name: "logs"
    #   size: "5Gi"
    #   storage_class: "gp2"
    #   access_mode: "ReadWriteOnce"
    #   mount_path: "/app/logs"

# -----------------------------------------------------------------------------
# DATABASE CONFIGURATION (if needed)
# -----------------------------------------------------------------------------
database:
  # Database type: postgresql, mysql, mongodb, redis, none
  type: "none"
  
  # External database connection (if using external DB)
  external:
    enabled: false
    # host: "your-db-host"
    # port: 5432
    # database: "your-db-name"
    # username: "your-db-user"
    # password_secret: "db-password"  # Reference to Kubernetes secret
  
  # Embedded database (for development/testing)
  embedded:
    enabled: false
    # Creates a database pod alongside your app
    # storage_size: "10Gi"

# -----------------------------------------------------------------------------
# ENVIRONMENT-SPECIFIC OVERRIDES
# -----------------------------------------------------------------------------
environments:
  # Development environment overrides
  development:
    deployment:
      replicas: 1
    resources:
      requests:
        cpu: "50m"
        memory: "64Mi"
      limits:
        cpu: "200m"
        memory: "256Mi"
    environment:
      variables:
        NODE_ENV: "development"
        LOG_LEVEL: "debug"
    observability:
      logging:
        level: "debug"
  
  # Staging environment overrides
  staging:
    deployment:
      replicas: 2
    networking:
      subdomain: "staging-${app.name}"
    environment:
      variables:
        NODE_ENV: "staging"
  
  # Production environment overrides
  production:
    deployment:
      replicas: 3
    autoscaling:
      min_replicas: 3
      max_replicas: 20
    resources:
      requests:
        cpu: "200m"
        memory: "256Mi"
      limits:
        cpu: "1000m"
        memory: "1Gi"
    security:
      network_policy:
        enabled: true

# -----------------------------------------------------------------------------
# CI/CD PIPELINE CONFIGURATION
# -----------------------------------------------------------------------------
pipeline:
  # Build configuration
  build:
    # Build triggers
    triggers:
      - push          # Build on every push
      - pull_request  # Build on pull requests
    
    # Build steps customization
    before_build:
      # - "npm install"
      # - "npm run test"
    
    after_build:
      # - "npm run build"
      # - "docker tag $IMAGE_NAME $IMAGE_NAME:latest"
  
  # Deployment configuration
  deploy:
    # Auto-deploy settings
    auto_deploy:
      development: true   # Auto-deploy to dev
      staging: false      # Manual deploy to staging
      production: false   # Manual deploy to production
    
    # Deployment approval
    require_approval:
      staging: true
      production: true
  
  # Notifications
  notifications:
    slack:
      enabled: false
      # webhook_url: "your-slack-webhook"
      # channels: ["#deployments"]
    
    email:
      enabled: false
      # recipients: ["team@example.com"]

# -----------------------------------------------------------------------------
# ADVANCED CONFIGURATION
# -----------------------------------------------------------------------------
advanced:
  # Custom Kubernetes manifests
  custom_manifests:
    # Path to additional Kubernetes YAML files in your repo
    # - "k8s/configmap.yaml"
    # - "k8s/secret.yaml"
  
  # Helm chart customization
  helm:
    # Additional Helm values to merge
    additional_values: {}
    
    # Custom hooks
    hooks:
      # pre_install: []
      # post_install: []
      # pre_upgrade: []
      # post_upgrade: []
  
  # Resource quotas (for namespace limits)
  quotas:
    enabled: false
    # limits:
    #   cpu: "2"
    #   memory: "4Gi"
    #   pods: "10"

# -----------------------------------------------------------------------------
# GIT REPOSITORIES (auto-filled by setup)
# -----------------------------------------------------------------------------
git:
  # Source repository (your application code)
  source_repo: "" #Do not put https://
  
  # Config repository (GitOps configuration)
  config_repo: "" #Do not put https://
  
  # Default branch
  default_branch: "main"